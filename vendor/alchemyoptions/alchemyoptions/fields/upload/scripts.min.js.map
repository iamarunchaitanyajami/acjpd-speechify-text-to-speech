{"version":3,"sources":["fields/upload/scripts.js"],"names":["window","document","$","AO","$uploaders","$uploader","uploader","$results","file_frame","$uploadButton","data","on","wp","media","frames","title","uploadStrings","button","text","multiple","source","json","state","get","first","toJSON","trim","thumbnail","results","type","sizes","url","full","html","concat","$input","val","id","addClass","src","icon","filename","filesizeHumanReadable","get_upload_value","open","jQuery","removeClass","initialise_uploader","i","el","$repeatee","e","find","Promise","resolve","value"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAEA,IAAMC,EAAaF,EAAE,sBAoBjB,SAAMG,EAANC,GACMC,IAQNF,EACSG,EATHD,EAAaL,EAAAI,GACPC,EAAKL,EAAA,4BAAjBG,GACMI,EAAaP,EAAI,0BAAAG,GAGnBG,EAFkBC,EAAAA,0BAAtBJ,GAEAK,KAAA,WAOQL,EAAAM,GAAA,QAAA,0BAAA,WACHH,IAEkDA,EAAAI,GAAAC,MAAAC,OAAAN,WAAAI,GAAAC,MAAA,CAKxCE,MALwCC,EAAAD,MAMvCE,OAAE,CANdC,KAAAF,EAAAE,MAUWV,MAAAA,SAJPW,UAAU,KAQTR,GAAA,SAAA,WAGSS,GAPVC,EAAOb,EAAWc,QAAQC,IAAI,aAAaC,QAAQC,WAOhCJ,EAAIK,KAAJL,EAAWM,IAAAA,QAAd,GAMNC,GAAAA,UACAP,EAADQ,KAAY,CACJR,IADID,EAAAC,EAAAS,MAAAH,UAAAN,EAAAS,MAAAH,UAAAI,IAAAV,EAAAS,MAAAE,KAAAD,IAIXxB,EAAW0B,KAAX,uCAAAC,OAAWd,EAAX,sBALNe,EAAAC,IAAAf,EAAAgB,SAUSC,GAAS,UAAAjB,EAAAQ,MAAlB,UAAkDD,EAAlDC,KAAA,CACA,IAAgBQ,EAAhB,CACHnC,EAAA,UAAA,CA1BLqC,IAAAlB,EAAAmB,KA6BAzB,MAAAM,EAAAoB,WAGJvC,EAAsB,UAAA,CAClB+B,KAAA,GAAAC,OAAAb,EAAAoB,SAAA,sCAAAP,OAAAb,EAAAqB,sBAAA,eATQnC,EAAS+B,SAAS,2BAA2BL,KAAKL,GAc/De,EAAmBP,IAAAf,EAAEgB,OApDZ7B,EAAWoC,SA2DxB5C,EAAQC,GAAU4C,QA7FrB,yBAAA,WAiFYV,EAAOC,IAAI,IACX7B,EAASuC,YAAY,2BAA2Bb,KAAK,MA5EzD7B,EAAA,IACI2C,EAAAA,KAAAA,SAAmBC,EAAAC,GADvBF,EAAAE,KAMA/C,EAAAD,GAAMiD,GAAS,sBAAf,SAAAC,EAAAzC,GACMN,IAAAA,EAAa8C,EAAUE,SAAAA,KAAK,sBAG9BhD,EAAgB,IACZ2C,EAAAA,KAAoBE,SAAAA,EAApBA,GADJF,EAAAE,OAsER9C,GAAGwC,iBAAmB,SAAAN,GAClB,OAAOgB,QAAQC,QAAS,CACpBzB,KAAQ,SACRQ,GAAMA,EACNkB,MAASrD,EAAC,IAAAgC,OAAKG,IAAMD,SA1FjC,CA6FGpC,OAAQC,SAAU4C","file":"fields\\upload\\scripts.min.js","sourcesContent":["\"use strict\";\r\n\r\n(function(window, document, $) {\r\n    window.AO = window.AO || {};\r\n\r\n    const $uploaders = $('.jsAlchemyUploader');\r\n\r\n    if( $uploaders[0] ) {\r\n        $uploaders.each((i, el) => {\r\n            initialise_uploader(el);\r\n        });\r\n    }\r\n\r\n    $(document).on('alch_repeatee_added', function(e, data) {\r\n        const $repeatee = data.repeatee;\r\n        const $uploaders = $repeatee.find('.jsAlchemyUploader');\r\n\r\n        if( $uploaders[0] ) {\r\n            $uploaders.each((i, el) => {\r\n                initialise_uploader(el);\r\n            });\r\n        }\r\n    });\r\n\r\n    function initialise_uploader( uploader ) {\r\n        const $uploader = $(uploader);\r\n        const $results = $('.jsAlchemyUploaderResults', $uploader);\r\n        const $input = $('.jsAlchemyUploaderInput', $uploader);\r\n        const $uploadButton = $('.jsAlchemyUploadTrigger', $uploader);\r\n        const uploadStrings = $uploadButton.data('strings');\r\n\r\n        let file_frame;\r\n        let json;\r\n\r\n        $uploader.on('click', '.jsAlchemyUploadTrigger', () => {\r\n            if ( file_frame ) {\r\n                file_frame.open();\r\n\r\n                return;\r\n            }\r\n\r\n            file_frame = wp.media.frames.file_frame = wp.media({\r\n                title: uploadStrings.title,\r\n                button: {\r\n                    text: uploadStrings.text\r\n                },\r\n                frame: 'select',\r\n                multiple: true\r\n            });\r\n\r\n            file_frame.on( 'select', () => {\r\n                json = file_frame.state().get('selection').first().toJSON();\r\n\r\n                if ( 0 > $.trim( json.url.length ) ) {\r\n                    return;\r\n                }\r\n\r\n                if( 'image' === json.type ) {\r\n                    const source = json.sizes.thumbnail ? json.sizes.thumbnail.url : json.sizes.full.url;\r\n\r\n                    $results.html(`<div class=\"field__image\"><img src=\"${source}\" alt=\"\" /></div>`);\r\n\r\n                    $input.val(json.id);\r\n                } else if ( 'video' === json.type || 'audio' === json.type ) {\r\n                    const results = [\r\n                        $('<img />', {\r\n                            src: json.icon,\r\n                            title: json.filename\r\n                        }),\r\n                        $('<div />', {\r\n                            html: `${json.filename} <span class=\"alchemy__filesize\">(${json.filesizeHumanReadable})</span>`\r\n                        })\r\n                    ];\r\n\r\n                    $results.addClass('field__results--visible').html(results);\r\n                    $input.val(json.id);\r\n                }\r\n            });\r\n\r\n            file_frame.open();\r\n        });\r\n\r\n        $uploader.on('click', '.jsAlchemyUploadRemove', () => {\r\n            $input.val('');\r\n            $results.removeClass('field__results--visible').html('');\r\n        });\r\n    }\r\n\r\n    AO.get_upload_value = id => {\r\n        return Promise.resolve( {\r\n            'type': 'upload',\r\n            'id': id,\r\n            'value': $(`#${id}`).val()\r\n        } );\r\n    };\r\n})(window, document, jQuery);"]}