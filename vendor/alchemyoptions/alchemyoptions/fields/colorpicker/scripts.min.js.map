{"version":3,"sources":["fields/colorpicker/scripts.js"],"names":["window","document","$","AO","$document","$colorpicker","colorpicker","$pickerInput","stopPropagation","find","on","e","$sampleBlock","iris","palettes","change","event","ui","css","toString","val","one","$colorpickers","initialise_colorpicker","i","el","$repeatee","data","get_colorpicker_value","id","Promise","resolve","type","value","concat","jQuery"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAGA,IAAMC,EAAcH,EAAD,yBAAbG,EAAYF,EAAED,GAoBhB,SAAMI,EAAgBC,GAChBC,IAAAA,EAAeF,EAAAA,GAAmEG,EAAFH,EAAAI,KAAA,SAAAC,GAAA,2BAAA,SAAAC,GAAAA,EAAAH,oBAAtFI,EAAAP,EAAAI,KAAA,+BAGAF,EAAAM,KAAmB,CACfC,UADe,EAETC,OAAE,SAAAC,EAAAC,GACJL,EAAiBM,IAAA,kBAAmBD,EAASE,MAATA,eAIgCX,EAAAA,KAAF,gBAAAE,GAAA,2BAAA,SAAAC,GAAAA,EAAAH,oBAE1EH,EAAgBK,GAAA,iCAAkC,6BAA8B,WAC5EH,EAAAa,IAAA,IACAR,EAAiBM,IAAA,kBAAmB,iBAIpCX,EAAaM,GAAK,QAAlB,WAEAT,EAAcS,KAAA,QAAdT,EAAAiB,IAAA,2BAAA,WAHJd,EAAAM,KAAA,YAnCAS,EAAA,IACIC,EAAAA,KAAAA,SAAsBC,EAAAC,GAD1BF,EAAAE,KAMArB,EAAMsB,GAAS,sBAAf,SAAAf,EAAAgB,GACML,IAAAA,EAAgBI,EAAAA,SAAUjB,KAAK,yBAGjCa,EAAmB,IACfC,EAAAA,KAAuBE,SAAAA,EAAvBA,GADJF,EAAAE,OAoCAtB,GAAAyB,sBADoB,SAAAC,GAEpB,OAFoBC,QAAAC,QAAA,CAGpBC,KAAU,cAHdH,GAAAA,EADJI,MAAA/B,EAAA,IAAAgC,OAAAL,IAAAT,SAnDJ,CA0DGpB,OAAQC,SAAUkC","file":"fields\\colorpicker\\scripts.min.js","sourcesContent":["\"use strict\";\r\n\r\n(function(window, document, $) {\r\n    window.AO = window.AO || {};\r\n\r\n    const $colorpickers = $('.jsAlchemyColorpicker');\r\n    const $document = $(document);\r\n\r\n    if( $colorpickers[0] ) {\r\n        $colorpickers.each((i, el) => {\r\n            initialise_colorpicker(el);\r\n        });\r\n    }\r\n\r\n    $document.on('alch_repeatee_added', function(e, data) {\r\n        const $repeatee = data.repeatee;\r\n        const $colorpickers = $repeatee.find('.jsAlchemyColorpicker');\r\n\r\n        if( $colorpickers[0] ) {\r\n            $colorpickers.each((i, el) => {\r\n                initialise_colorpicker(el);\r\n            });\r\n        }\r\n    });\r\n\r\n    function initialise_colorpicker(colorpicker) {\r\n        const $colorpicker = $(colorpicker);\r\n        const $pickerInput = $colorpicker.find('input').on('click.alchemyColorpicker', e => { e.stopPropagation() });\r\n        const $sampleBlock = $colorpicker.find('.jsAlchemyColorpickerSample');\r\n\r\n        $pickerInput.iris( {\r\n            palettes: true,\r\n            change: (event, ui) => {\r\n                $sampleBlock.css('backgroundColor', ui.color.toString());\r\n            }\r\n        } );\r\n\r\n        $colorpicker.find( '.iris-picker' ).on('click.alchemyColorpicker', e => { e.stopPropagation() });\r\n\r\n        $colorpicker.on('click.alchemyColorpickerDelete', '.jsAlchemyColorpickerClear', () => {\r\n            $pickerInput.val(\"\");\r\n            $sampleBlock.css('backgroundColor', 'transparent');\r\n        });\r\n\r\n        $pickerInput.on('focus', function(){\r\n            $pickerInput.iris('show');\r\n\r\n            $document.one('click.alchemyColorpicker', () => {\r\n                $pickerInput.iris('hide');\r\n            });\r\n        });\r\n    }\r\n\r\n    AO.get_colorpicker_value = id => {\r\n        return Promise.resolve( {\r\n            'type': 'colorpicker',\r\n            'id': id,\r\n            'value': $(`#${id}`).val()\r\n        } );\r\n    };\r\n})(window, document, jQuery);"]}