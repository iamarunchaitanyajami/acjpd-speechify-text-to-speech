{"version":3,"sources":["fields/spacer/scripts.js"],"names":["window","document","$","AO","$spacers","$spacer","spacer","interval","on","rate","stop_input_update","$input","increment","update_input","currentValue","$trigger","newVal","parseInt","val","data","Promise","resolve","mousedown","setInterval","this","click","e","which","preventDefault","keyup","initialise_spacer","i","el","$repeatee","find","get_spacer_value","id","type","value","top","concat","right","bottom","left","jQuery"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAEA,IAAMC,EAAWF,EAAE,oBAoBf,SAAMG,EAANC,GAEIC,IAEIA,EAFJA,EAAJL,EAAAI,GAIQE,EAAG,EACPC,EAAa,EA0BjB,SAASC,IAQCC,EADVC,EAASC,EAIKC,cAAYP,GAIlB,SAAIM,EAAWE,GACXC,IAAML,EAAWI,EAAED,SAAiBF,SAEpCI,OAASC,WACZ,IAESD,EAFTF,EAAAH,EAAAO,OAHGF,EAOH,SAAAD,EAAAI,KAAA,QAPYF,SAAUH,GAAiBF,EAUpCK,SAAAH,GAAAF,IAGY,IACHI,EAAT,GAGY,GAALP,IACEG,EAAT,IAGJ,GAAWI,IACPJ,EAAA,IAGf,GAAAH,IAPeG,EAAY,IAYjBQ,EAAQC,IAASL,GACZP,KA1EDJ,EAAAG,GAAA,CAIPc,UAAcZ,WACLH,EAAAgB,YAAWV,EAAAX,EAAAsB,OAAA,MAEhBX,WAAeH,EAPZe,MAAA,WASPf,IACQG,EAAAX,EAAkBsB,MAAlBX,IAGAA,QAAaX,SAAbwB,GACH,KAAAA,EAAAC,OAAA,KAAAD,EAAAC,QAdED,EAAAE,iBAiBRf,EAjBHX,EAAAsB,MAiBGX,KADCgB,MAASnB,GAMHC,mBAELN,EAAAG,GAAA,OAAA,QAAA,WALL,IAAAG,EAAAT,EAAAsB,MAQSd,EAAAA,OACIC,EAATO,IAAA,KAnDJd,EAAA,IACI0B,EAAAA,KAAAA,SAAiBC,EAAAC,GADrBF,EAAAE,KAMA9B,EAAAD,GAAMgC,GAAS,sBAAf,SAAAP,EAAAP,GACMf,IAAAA,EAAW6B,EAAUC,SAAAA,KAAK,oBAG5B9B,EAAc,IACV0B,EAAAA,KAAkBE,SAAAA,EAAlBA,GADJF,EAAAE,OA4FI7B,GAAAgC,iBAAkBD,SAAAA,GAClB,IAAA7B,EAAgB6B,EAAAA,IAAAA,OAARE,IAPhB,OAAAhB,QAAAC,QAAA,CAHJgB,KAAA,SAcOpC,GAAAA,EARCqC,MAAS,CACLC,IAAOlC,EAAQ6B,KAAR,IAAAM,OAAiBJ,EAAjB,SAA2BlB,MAClCuB,MAASpC,EAAQ6B,KAAR,IAAAM,OAAiBJ,EAAjB,WAA6BlB,MACtCwB,OAAUrC,EAAQ6B,KAAR,IAAAM,OAAiBJ,EAAjB,YAA8BlB,MACxCyB,KAAQtC,EAAQ6B,KAAR,IAAAM,OAAiBJ,EAAjB,UAA4BlB,UA7GpD,CAiHGlB,OAAQC,SAAU2C","file":"fields\\spacer\\scripts.min.js","sourcesContent":["\"use strict\";\r\n\r\n(function(window, document, $) {\r\n    window.AO = window.AO || {};\r\n\r\n    const $spacers = $('.jsAlchemySpacer');\r\n\r\n    if( $spacers[0] ) {\r\n        $spacers.each((i, el) => {\r\n            initialise_spacer(el);\r\n        });\r\n    }\r\n\r\n    $(document).on('alch_repeatee_added', function(e, data) {\r\n        const $repeatee = data.repeatee;\r\n        const $spacers = $repeatee.find('.jsAlchemySpacer');\r\n\r\n        if( $spacers[0] ) {\r\n            $spacers.each((i, el) => {\r\n                initialise_spacer(el);\r\n            });\r\n        }\r\n    });\r\n\r\n    function initialise_spacer(spacer) {\r\n        const $spacer = $(spacer);\r\n\r\n        let interval;\r\n        let increment = 1;\r\n        let rate = 1;\r\n\r\n        $spacer.on({\r\n            'mousedown': function(){\r\n                interval = setInterval(update_input($(this)), 150)\r\n            },\r\n            'mouseleave': stop_input_update,\r\n            'click': function() {\r\n                stop_input_update();\r\n                update_input($(this))();\r\n            },\r\n            'keydown': function(e) {\r\n                if( 13 === e.which || 32 === e.which ) {\r\n                    e.preventDefault();\r\n\r\n                    update_input($(this))();\r\n                }\r\n            },\r\n            'keyup': stop_input_update\r\n        }, '.jsSpacerButton');\r\n\r\n        $spacer.on('blur', 'input', function() {\r\n            const $input = $(this);\r\n\r\n            if( ! $input.val() ) {\r\n                $input.val(0);\r\n            }\r\n        });\r\n\r\n        function stop_input_update() {\r\n            increment = 1;\r\n            rate = 1;\r\n\r\n            clearInterval(interval);\r\n        }\r\n\r\n        function update_input($trigger) {\r\n            const $input = $trigger.siblings('input');\r\n\r\n            return function() {\r\n                const currentValue = $input.val();\r\n\r\n                let newVal;\r\n\r\n                if( 'decr' === $trigger.data('type') ) {\r\n                    newVal = parseInt( currentValue ) - increment;\r\n                } else {\r\n                    newVal = parseInt( currentValue ) + increment;\r\n                }\r\n\r\n                if( newVal <= 0 ) {\r\n                    newVal = 0;\r\n                }\r\n\r\n                if( rate > 15 ) {\r\n                    increment = 11;\r\n                }\r\n\r\n                if( rate > 25 ) {\r\n                    increment = 21;\r\n                }\r\n\r\n                if( rate > 35 ) {\r\n                    increment = 31;\r\n                }\r\n\r\n                $input.val(newVal);\r\n                rate++;\r\n            }\r\n        }\r\n    }\r\n\r\n    AO.get_spacer_value = id => {\r\n        const $spacer = $(`#${id}`);\r\n\r\n        return Promise.resolve( {\r\n            'type': 'spacer',\r\n            'id': id,\r\n            'value': {\r\n                'top': $spacer.find(`#${id}_top`).val(),\r\n                'right': $spacer.find(`#${id}_right`).val(),\r\n                'bottom': $spacer.find(`#${id}_bottom`).val(),\r\n                'left': $spacer.find(`#${id}_left`).val(),\r\n            }\r\n        } );\r\n    };\r\n})(window, document, jQuery);"]}